/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.65
 * Generated at: 2023-05-28 14:21:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import model.Subject;
import model.Clss;
import model.Teacher;
import model.SubjectPerClass;

public final class subjectsPerClass_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/navbar.jsp", Long.valueOf(1685189771071L));
    _jspx_dependants.put("/footer.jsp", Long.valueOf(1685107714389L));
    _jspx_dependants.put("/header.jsp", Long.valueOf(1685159373312L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("model.Subject");
    _jspx_imports_classes.add("model.SubjectPerClass");
    _jspx_imports_classes.add("model.Clss");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("model.Teacher");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1.0\"/>\r\n");
      out.write("    <title>Learner's Academy 2023</title>\r\n");
      out.write("\r\n");
      out.write("    <!-- CSS  -->\r\n");
      out.write("    <script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-2.1.1.min.js\"></script>\r\n");
      out.write("    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\r\n");
      out.write("    <link href=\"css/materialize.css\" type=\"text/css\" rel=\"stylesheet\" media=\"screen,projection\"/>\r\n");
      out.write("    <link href=\"css/palette.css\" type=\"text/css\" rel=\"stylesheet\" media=\"screen,projection\"/>\r\n");
      out.write("    <link href=\"css/extras.css\" type=\"text/css\" rel=\"stylesheet\" media=\"screen,projection\"/>\r\n");
      out.write("</head>");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<nav class=\"default-primary-color\" role=\"navigation\">\r\n");
      out.write("    <div class=\"nav-wrapper container\">\r\n");
      out.write("        <a id=\"logo-container\" href=\"#\" class=\"brand-logo\">\r\n");
      out.write("            <img alt=\"logo\" src=\"images/eduspa.png\">Learner's Academy\r\n");
      out.write("        </a>\r\n");
      out.write("        <ul class=\"right hide-on-med-and-down\">\r\n");
      out.write("            <li><a href=\"./dashboard-controller\">Dashboard</a></li>\r\n");
      out.write("            <li><a href=\"./\">Logout</a></li>\r\n");
      out.write("        </ul>\r\n");
      out.write("\r\n");
      out.write("        <ul id=\"nav-mobile\" class=\"sidenav\">\r\n");
      out.write("            <li><a href=\"./dashboard-controller\">Dashboard</a></li>\r\n");
      out.write("        </ul>\r\n");
      out.write("        <a href=\"#\" data-target=\"nav-mobile\" class=\"sidenav-trigger\"><i class=\"material-icons\">menu</i></a>\r\n");
      out.write("    </div>\r\n");
      out.write("</nav>");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<br/>\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("    <div class=\"col s12 m7\">\r\n");
      out.write("        <h2 class=\"header\">Subjects Per Class</h2>\r\n");
      out.write("        <div class=\"card horizontal\">\r\n");
      out.write("            <div class=\"card-stacked\">\r\n");
      out.write("                <div class=\"card-content\">\r\n");
      out.write("\r\n");
      out.write("                    <h4 class=\"header\">Classes</h4>\r\n");
      out.write("                    <table class=\"striped card-panel highlight\" id=\"myTable\">\r\n");
      out.write("                        <thead>\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <th class=\"center-align\">ID</th>\r\n");
      out.write("                            <th class=\"center-align\">Class Name</th>\r\n");
      out.write("                            <th class=\"center-align\">Choose</th>\r\n");
      out.write("                        </tr>\r\n");
      out.write("                        </thead>\r\n");
      out.write("                        <tbody>\r\n");
      out.write("                        ");

                            List<Clss> classesList = (List<Clss>) request.getAttribute("classesList");
                            Clss claseSelected = (Clss) request.getAttribute("claseSelected");

                            // Paint the rows of the subject table
                            for (Clss clase : classesList) {
                                out.println("<tr>");
                                out.println("<td class=\"center-align\">" + clase.getClassId());
                                out.println("</td><td class=\"center-align\">");
                                out.println(clase.getClassName());
                                out.println("<td class=\"center-align\">" +
                                        "<a class=\"waves-effect waves-light btn-small accent-color\" " +
                                        "href=\"/learners-academy/subjects-per-class-controller?pClaseId=" + clase.getClassId() + "&pClaseName=" + clase.getClassName() + "\">" +
                                        "<i class=\"material-icons right\">forward</i>" + clase.getClassName() + "</a>");
                                out.println("</td><td>");
                                out.println("</td></tr>");
                            }
                        
      out.write("\r\n");
      out.write("                        </tbody>\r\n");
      out.write("                    </table>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"card-stacked\">\r\n");
      out.write("                <div class=\"card-content\">\r\n");
      out.write("                    <h4 class=\"header\">Subjects of ");
      out.print(claseSelected.getClassName());
      out.write("\r\n");
      out.write("                    </h4>\r\n");
      out.write("                    <table class=\"striped card-panel highlight light-primary-color\" id=\"myTable\">\r\n");
      out.write("                        <thead>\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <th class=\"center-align\">ID</th>\r\n");
      out.write("                            <th class=\"center-align\">Subject Name</th>\r\n");
      out.write("                            <th class=\"center-align\">Delete</th>\r\n");
      out.write("                        </tr>\r\n");
      out.write("                        </thead>\r\n");
      out.write("                        <tbody>\r\n");
      out.write("                        ");

                            List<SubjectPerClass> subjectsPerClassList =
                                    (List<SubjectPerClass>) request.getAttribute("subjectsPerClassList");

                            // Paint the rows of the subject table
                            for (SubjectPerClass subjectPerClass : subjectsPerClassList) {
                                out.println("");
                                out.println("<tr><td class=\"center-align\">");
                                out.println(subjectPerClass.getSubjectId());
                                out.println("</td><td class=\"center-align\">");
                                out.println(subjectPerClass.getSubjectName());
                                out.println("</td><td class=\"center-align\">");
                                out.println("<a href='javascript:fOpenDelete(" +
                                        "\"" + subjectPerClass.getClassId() + "\", " +
                                        "\"" + subjectPerClass.getSubjectId() + "\", " +
                                        "\"" + subjectPerClass.getSubjectName() + "\")'>" +
                                        "<i class=\"material-icons\">delete</i></a>");
                                out.println("</td></tr>");
                            }
                        
      out.write("\r\n");
      out.write("                        </tbody>\r\n");
      out.write("                    </table>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    <a class=\"btn-floating btn-large right waves-effect waves-light red\" href=\"javascript:fOpenSubjectsAvailable();\">\r\n");
      out.write("        <i class=\"material-icons\">add</i></a>\r\n");
      out.write("</div>\r\n");
      out.write("<a id='modalLink' class=\"waves-effect waves-light btn hide modal-trigger\" href=\"#modal1\">Modal</a>\r\n");
      out.write("<a id='modalLink2' class=\"waves-effect waves-light btn hide modal-trigger\" href=\"#modal2\">Modal2</a>\r\n");
      out.write("<!-- Modal Structure -->\r\n");
      out.write("<div id=\"modal1\" class=\"modal\">\r\n");
      out.write("    <form id=\"form1\" class=\"col s12\">\r\n");
      out.write("        <div class=\"preloader-background\" id=\"preloader\">\r\n");
      out.write("            <div class=\"preloader-wrapper big active\">\r\n");
      out.write("                <div class=\"spinner-layer spinner-blue-only\">\r\n");
      out.write("                    <div class=\"circle-clipper left\">\r\n");
      out.write("                        <div class=\"circle\"></div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"gap-patch\">\r\n");
      out.write("                        <div class=\"circle\"></div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"circle-clipper right\">\r\n");
      out.write("                        <div class=\"circle\"></div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"modal-content\">\r\n");
      out.write("            <h4>Subjects Available</h4>\r\n");
      out.write("            <div id=\"contenido\">\r\n");
      out.write("                <div class=\"row\">\r\n");
      out.write("                    <div class=\"input-field col s12\">\r\n");
      out.write("                        <select id=\"subjectId\" name=\"subjectId\" class=\"select\">\r\n");
      out.write("                            <option value=\"\" disabled selected>Select the available subject</option>\r\n");
      out.write("\r\n");
      out.write("                            ");

                                List<Subject> subjectsList = (List<Subject>) request.getAttribute("subjectsAvailableList");

                                // Paint the rows of the subject table
                                for (Subject subject : subjectsList) {
                                    out.println("<option value=\"" + subject.getSubjectId() + "\">");
                                    out.println("(" + subject.getSubjectId() + ") " + subject.getSubjectName());
                                    out.println("</option>");
                                }
                            
      out.write("\r\n");
      out.write("                        </select>\r\n");
      out.write("                        <label for=\"subjectId\" class=\"active\">Subjects Available</label>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"modal-footer\">\r\n");
      out.write("                    <button class=\"modal-close waves-effect waves-light btn accent-color\" type=\"submit\"><i\r\n");
      out.write("                            class=\"material-icons left\">save\r\n");
      out.write("                    </i>Save Changes\r\n");
      out.write("                    </button>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <input type=\"text\" id=\"action\" name=\"action\" value=\"\">\r\n");
      out.write("            <input type=\"text\" id=\"classId\" name=\"classId\" value=\"");
      out.print(claseSelected.getClassId());
      out.write("\">\r\n");
      out.write("        </div>\r\n");
      out.write("    </form>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div id=\"modal2\" class=\"modal\">\r\n");
      out.write("    <form id=\"form2\" class=\"col s12\">\r\n");
      out.write("        <div class=\"preloader-background\" id=\"preloader2\">\r\n");
      out.write("            <div class=\"preloader-wrapper big active\">\r\n");
      out.write("                <div class=\"spinner-layer spinner-blue-only\">\r\n");
      out.write("                    <div class=\"circle-clipper left\">\r\n");
      out.write("                        <div class=\"circle\"></div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"gap-patch\">\r\n");
      out.write("                        <div class=\"circle\"></div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"circle-clipper right\">\r\n");
      out.write("                        <div class=\"circle\"></div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"modal-content\">\r\n");
      out.write("            <h4>Delete Subject from Class</h4>\r\n");
      out.write("            <br />\r\n");
      out.write("            <p id=\"card-text\">\r\n");
      out.write("                Click <b>SAVE CHANGES</b> if you want to remove the subject.\r\n");
      out.write("            </p>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"modal-footer\">\r\n");
      out.write("            <button class=\"modal-close waves-effect waves-light btn accent-color\" type=\"submit\">\r\n");
      out.write("                <i class=\"material-icons left\">save</i>Save Changes\r\n");
      out.write("            </button>\r\n");
      out.write("        </div>\r\n");
      out.write("        <input type=\"hidden\" id=\"action\" name=\"action\" value=\"\">\r\n");
      out.write("        <input type=\"hidden\" id=\"deleteClassId\" name=\"deleteClassId\" value=\"");
      out.print(claseSelected.getClassId());
      out.write("\">\r\n");
      out.write("        <input type=\"hidden\" id=\"deleteSubjectId\" name=\"deleteSubjectId\" value=\"\">\r\n");
      out.write("        <input type=\"hidden\" id=\"deleteSubjectName\" name=\"deleteSubjectName\" value=\"\">\r\n");
      out.write("    </form>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    async function handleSubmit(event) {\r\n");
      out.write("        event.preventDefault();\r\n");
      out.write("\r\n");
      out.write("        const data = new FormData(event.target);\r\n");
      out.write("        const oFormEntries = Object.fromEntries(data.entries());\r\n");
      out.write("        console.log(\"----> about to saveOneSubject: \" + oFormEntries.toString());\r\n");
      out.write("        await saveNewSubject(oFormEntries);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    const form = document.querySelector('#form1');\r\n");
      out.write("    form.addEventListener('submit', handleSubmit);\r\n");
      out.write("\r\n");
      out.write("    async function handleSubmitDelete(event) {\r\n");
      out.write("        event.preventDefault();\r\n");
      out.write("\r\n");
      out.write("        const data = new FormData(event.target);\r\n");
      out.write("        const oFormEntries = Object.fromEntries(data.entries());\r\n");
      out.write("        console.log(\"----> about to deleteOneSubject: \" + oFormEntries.toString());\r\n");
      out.write("        await deleteOneSubject(oFormEntries);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    const form2 = document.querySelector('#form2');\r\n");
      out.write("    form2.addEventListener('submit', handleSubmitDelete);\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!--  Scripts-->\r\n");
      out.write("<script>\r\n");
      out.write("    async function fOpenSubjectsAvailable() {\r\n");
      out.write("\r\n");
      out.write("        // Set the action\r\n");
      out.write("        const form1El = document.getElementById(\"form1\");\r\n");
      out.write("        form1El.elements[\"action\"].value = \"saveNewSubjectPerClass\";\r\n");
      out.write("\r\n");
      out.write("        // Trigger the Modal to open\r\n");
      out.write("        document.getElementById('modalLink').click();\r\n");
      out.write("        document.getElementById(\"preloader\").style.display = \"flex\"; // this centers the spinner in the modal window\r\n");
      out.write("\r\n");
      out.write("        try {\r\n");
      out.write("\r\n");
      out.write("            //Re-initialize the select controls\r\n");
      out.write("            M.FormSelect.init(document.querySelectorAll('.select'), {classes: \"\"});\r\n");
      out.write("            M.updateTextFields();\r\n");
      out.write("\r\n");
      out.write("            await delay(1000);\r\n");
      out.write("            document.getElementById(\"preloader\").style.display = \"none\";\r\n");
      out.write("\r\n");
      out.write("        } catch (e) {\r\n");
      out.write("            // On Error\r\n");
      out.write("            console.log(\"ERROR: fetchOneSubject/querySelector - \" + e);\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    async function fOpenDelete(classId, subjectId, subjectName) {\r\n");
      out.write("\r\n");
      out.write("        // Set the action\r\n");
      out.write("        const form2El = document.getElementById(\"form2\");\r\n");
      out.write("        form2El.elements[\"action\"].value = \"deleteOneSubject\";\r\n");
      out.write("        document.getElementById(\"deleteClassId\").value = classId;\r\n");
      out.write("        document.getElementById(\"deleteSubjectId\").value = subjectId;\r\n");
      out.write("        document.getElementById(\"deleteSubjectName\").value = subjectName;\r\n");
      out.write("\r\n");
      out.write("        // Trigger the Modal to open\r\n");
      out.write("        document.getElementById('modalLink2').click();\r\n");
      out.write("        document.getElementById(\"preloader2\").style.display = \"flex\"; // this centers the spinner in the modal window\r\n");
      out.write("        await delay(1000);\r\n");
      out.write("        document.getElementById(\"preloader2\").style.display = \"none\";\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    //ACTION: updateOneSubject or saveNewSubject\r\n");
      out.write("    function saveNewSubject(oFormEntries) {\r\n");
      out.write("        console.log(\" -----> saveOneSubject:\" + \"\");\r\n");
      out.write("        console.log(\" -----> action: \" + document.getElementById('action').value); //saveNewSubjectPerClass\r\n");
      out.write("        try {\r\n");
      out.write("            fetch(\"http://localhost:8080/learners-academy/subjects-per-class-controller\", {\r\n");
      out.write("                headers: {\r\n");
      out.write("                    'Accept': 'application/json',\r\n");
      out.write("                    'Content-Type': 'application/json'\r\n");
      out.write("                },\r\n");
      out.write("                method: \"POST\",\r\n");
      out.write("                body: JSON.stringify(oFormEntries)\r\n");
      out.write("            })\r\n");
      out.write("                .then(res => res.text()).then((jsonReturnString) => {\r\n");
      out.write("                console.log(\" -------> subjectjsp fetch: \" + jsonReturnString);\r\n");
      out.write("                try {\r\n");
      out.write("\r\n");
      out.write("                    //Answer received from the servlet\r\n");
      out.write("                    const jsonObject = JSON.parse(jsonReturnString);\r\n");
      out.write("                    M.toast({\r\n");
      out.write("                        html:\r\n");
      out.write("                            jsonObject.code === 0 ? jsonObject.message : \"<table><tr><td class=\\\"center-align\\\">Subject NOT UPDATED</td></tr><tr><td>CODE: \" + jsonObject.code +\r\n");
      out.write("                                \" - \" +\r\n");
      out.write("                                jsonObject.message + \"</td></tr></table>\"\r\n");
      out.write("                        , completeCallback: function () {\r\n");
      out.write("                            location.reload()\r\n");
      out.write("                        }\r\n");
      out.write("                    })\r\n");
      out.write("                } catch (e) {\r\n");
      out.write("                    // On Error\r\n");
      out.write("                    console.log(\"ERROR: fetchSubjects/querySelector\" + e);\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("            });\r\n");
      out.write("        } catch (e) {\r\n");
      out.write("            console.log(e);\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    //ACTION: deleteOneSubject\r\n");
      out.write("    function deleteOneSubject(oFormEntries) {\r\n");
      out.write("        console.log(\" -----> deleteOneSubject:\" + \"\");\r\n");
      out.write("        console.log(\" -----> action: \" + document.getElementById('action').value);\r\n");
      out.write("        try {\r\n");
      out.write("            fetch(\"http://localhost:8080/learners-academy/subjects-per-class-controller\", {\r\n");
      out.write("                headers: {\r\n");
      out.write("                    'Accept': 'application/json',\r\n");
      out.write("                    'Content-Type': 'application/json'\r\n");
      out.write("                },\r\n");
      out.write("                method: \"POST\",\r\n");
      out.write("                body: JSON.stringify(oFormEntries)\r\n");
      out.write("            })\r\n");
      out.write("                .then(res => res.text()).then((jsonReturnString) => {\r\n");
      out.write("                console.log(\" -------> subjectsPerClass.jsp fetch: \" + jsonReturnString);\r\n");
      out.write("                try {\r\n");
      out.write("\r\n");
      out.write("                    //Answer received from the servlet\r\n");
      out.write("                    const jsonObject = JSON.parse(jsonReturnString);\r\n");
      out.write("                    M.toast({\r\n");
      out.write("                        html:\r\n");
      out.write("                            jsonObject.code === 0 ? jsonObject.message : \"<table><tr><td class=\\\"center-align\\\">Subject NOT UPDATED</td></tr><tr><td>CODE: \" + jsonObject.code +\r\n");
      out.write("                                \" - \" +\r\n");
      out.write("                                jsonObject.message + \"</td></tr></table>\"\r\n");
      out.write("                        , completeCallback: function () {\r\n");
      out.write("                            location.reload()\r\n");
      out.write("                        }\r\n");
      out.write("                    })\r\n");
      out.write("                } catch (e) {\r\n");
      out.write("                    // On Error\r\n");
      out.write("                    console.log(\"ERROR: fetchSubjects/querySelector\" + e);\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("            });\r\n");
      out.write("        } catch (e) {\r\n");
      out.write("            console.log(e);\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    //Configuration of Modals\r\n");
      out.write("    document.addEventListener('DOMContentLoaded', function () {\r\n");
      out.write("        //Modal\r\n");
      out.write("        var elems = document.querySelectorAll('.modal');\r\n");
      out.write("        var options = {opacity: 0.5}//, onOpenStart: fOpenEdit};\r\n");
      out.write("        var instances = M.Modal.init(elems, options);\r\n");
      out.write("        var instance = M.Modal.getInstance(elems);\r\n");
      out.write("\r\n");
      out.write("        //Select\r\n");
      out.write("        var elems = document.querySelectorAll('.select');\r\n");
      out.write("        var options = {classes: \"\"}\r\n");
      out.write("        var instances = M.FormSelect.init(elems, options);\r\n");
      out.write("\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script src=\"js/materialize.js\"></script>\r\n");
      out.write("<script src=\"js/pagination.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("    function createRequestObject()\r\n");
      out.write("    {\r\n");
      out.write("        var returnObj = false;\r\n");
      out.write("\r\n");
      out.write("        if(window.XMLHttpRequest) {\r\n");
      out.write("            returnObj = new XMLHttpRequest();\r\n");
      out.write("        } else if(window.ActiveXObject) {\r\n");
      out.write("            try {\r\n");
      out.write("                returnObj = new ActiveXObject(\"Msxml2.XMLHTTP\");\r\n");
      out.write("\r\n");
      out.write("            } catch (e) {\r\n");
      out.write("                try {\r\n");
      out.write("                    returnObj = new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n");
      out.write("                }\r\n");
      out.write("                catch (e) {}\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("        }\r\n");
      out.write("        return returnObj;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var http = createRequestObject();\r\n");
      out.write("    var target;\r\n");
      out.write("\r\n");
      out.write("    // This is the function to call, give it the script file you want to run and\r\n");
      out.write("    // the div you want it to output to.\r\n");
      out.write("    function sendRequest(scriptFile, targetElement)\r\n");
      out.write("    {\r\n");
      out.write("        target = targetElement;\r\n");
      out.write("        try{\r\n");
      out.write("            http.open('get', scriptFile, true);\r\n");
      out.write("        }\r\n");
      out.write("        catch (e){\r\n");
      out.write("            document.getElementById(target).innerHTML = e;\r\n");
      out.write("            return;\r\n");
      out.write("        }\r\n");
      out.write("        http.onreadystatechange = handleResponse;\r\n");
      out.write("        http.send();\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function handleResponse()\r\n");
      out.write("    {\r\n");
      out.write("        if(http.readyState == 4) {\r\n");
      out.write("            try{\r\n");
      out.write("                var strResponse = http.responseText;\r\n");
      out.write("                document.getElementById(target).innerHTML = strResponse;\r\n");
      out.write("            } catch (e){\r\n");
      out.write("                document.getElementById(target).innerHTML = e;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    const delay = ms => new Promise(res => setTimeout(res, ms));\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    $(document).ready(function(){\r\n");
      out.write("        $('#myTable').pageMe({\r\n");
      out.write("            pagerSelector:'#myPager',\r\n");
      out.write("            activeColor: 'blue',\r\n");
      out.write("            prevText:'Previous',\r\n");
      out.write("            nextText:'Next',\r\n");
      out.write("            showPrevNext:true,\r\n");
      out.write("            hidePageNumbers:false,\r\n");
      out.write("            perPage:10\r\n");
      out.write("        });\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
